#N canvas 192 42 1117 604 12;
#X obj 38 18 trigger;
#X text 103 19 - sequence messages in right-to-left order;
#X obj 66 43 t;
#X text 104 43 - abbreviation;
#X floatatom 263 331 5 0 0 0 - - - 0;
#X obj 263 371 trigger float bang float;
#X msg 345 411 10;
#X obj 345 445 -;
#X obj 327 473 *;
#X floatatom 327 503 5 0 0 0 - - - 0;
#X obj 41 383 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X obj 41 431 trigger bang bang bang;
#X obj 192 486 print 1st;
#X obj 116 486 print 2nd;
#X obj 41 486 print 3rd;
#X text 63 382 create a bang sequence;
#X obj 488 280 t f b s l a p;
#X obj 77 280 trigger float bang symbol list anything pointer;
#X text 422 281 same as:;
#X msg 692 144 1 2 3;
#X obj 692 175 t l f;
#X listbox 724 203 7 0 0 0 - - - 0;
#X msg 792 144 list a b c;
#X obj 792 175 t l s;
#X text 310 324 mix floats and bang output, f 14;
#X floatatom 428 401 5 0 0 0 - - - 0;
#X floatatom 263 409 5 0 0 0 - - - 0;
#X obj 156 567 unpack;
#X text 40 566 see also:;
#X floatatom 926 117 5 0 0 0 - - - 0;
#X listbox 926 232 10 0 0 0 - - - 0;
#X msg 971 117 symbol a;
#X msg 1001 174 1 2 3;
#X msg 986 146 list a b c;
#X floatatom 898 381 5 0 0 0 - - - 0;
#X msg 942 381 symbol a;
#X msg 965 436 1 2 3;
#X msg 955 409 list a b c;
#X msg 775 381 dog my cats;
#X obj 926 203 trigger list bang;
#X obj 898 467 trigger anything bang;
#X obj 898 513 print [t a b];
#X obj 926 273 print [t l b];
#X text 888 565 updated for Pd version 0.52;
#X obj 643 473 t;
#X text 683 473 =;
#X text 649 432 the default is [t b b]:, f 12;
#X obj 706 473 t b b;
#X obj 520 447 t b f;
#X listbox 499 513 11 0 0 0 - - - 0;
#X floatatom 520 422 7 0 0 0 - - - 0;
#X floatatom 498 392 7 0 0 0 - - - 0;
#X obj 499 478 pack f f;
#X text 478 349 always force an output, f 12;
#X obj 115 567 bang;
#X listbox 692 232 7 0 0 0 - - - 0;
#X listbox 792 232 7 0 0 0 - - - 0;
#X listbox 824 203 7 0 0 0 - - - 0;
#X text 57 220 The message types/arguments are: 'float' \, 'bang' \, 'symbol' \, 'list' \, 'anything' and 'pointer' (see [pd pointer]) - all of which can be abbreviated to its first letter like the object itself \, see below:, f 78;
#N canvas 446 68 561 233 pointer 0;
#X obj 81 131 bng 17 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#N canvas 491 316 412 249 open 0;
#X obj 58 49 inlet;
#X obj 58 105 pdcontrol;
#X msg 58 78 dir;
#X msg 58 132 \; pd open 01.scalars.pd \$1/../4.data.structures;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X restore 81 161 pd open;
#X text 105 130 <-- open first examle of the 4.Data.Structure section;
#X text 37 34 The [trigger] object can receive a pointer and sequence it. A pointer can be the location of a Data Structure scalar somewhere or the head of a Data Structure list. To know more about Data Structures \, how to handle pointers and see examples \, please refer to the 4.Data.Structure section of the Pd's tutorials., f 70;
#X connect 0 0 1 0;
#X restore 80 325 pd pointer;
#X text 160 325 <= about pointers, f 8;
#X text 14 139 The creation arguments specify the number of outlets and message type to output. Most of the time you want to match the input message type to the argument \, but a mix is possible and can be convenient. For instance \, it's very useful to insert a 'bang' message into a sequence \, so you'll always have a bang output with the 'bang' specifier no matter what the input is., f 89;
#X obj 7 75 cnv 1 640 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#N canvas 579 124 599 277 reference 0;
#X obj 11 46 cnv 5 575 5 empty empty INLET: 8 18 0 13 #202020 #000000 0;
#X obj 11 97 cnv 2 575 2 empty empty OUTLETS: 8 12 0 13 #202020 #000000 0;
#X obj 11 183 cnv 2 575 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000 0;
#X obj 10 250 cnv 5 575 5 empty empty empty 8 18 0 13 #202020 #000000 0;
#X obj 11 128 cnv 1 575 1 empty empty n: 8 12 0 13 #7c7c7c #000000 0;
#X text 92 101 (depends on the number of arguments);
#X obj 37 15 trigger;
#X text 129 16 - sequence messages in right-to-left order.;
#X text 112 61 anything - any message to be sequenced over the outlets.;
#X text 112 137 anything -;
#X text 189 137 sequenced messages from right to left \, the number of outlets and message type depends on the arguments., f 52;
#X text 119 193 1) list -;
#X text 189 193 symbols that define outlet's message type: float' \, 'bang' \, 'symbol' \, 'list' \, 'anything' and 'pointer' \, all of which can be abreviatted (default: f f)., f 52;
#X obj 99 15 t;
#X restore 470 41 pd reference;
#X text 568 41 <= click;
#X obj 6 548 cnv 1 1100 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X obj 648 3 cnv 1 1 73 empty empty empty 8 12 0 13 #000000 #000000 0;
#X text 21 95 The [trigger] object outputs its input from right to left. Because of the hot/cold inlet paradigm of Pd \, output from right to left is the usual output order in Pd objects., f 88;
#X text 677 313 You can use the 'anything' specifier to bypass any kind of message unaltered \, be it a float \, a symbol \, a pointer \, a bang \, a list and also any generic message.;
#X text 670 15 The 'float' \, 'symbol' and 'pointer' specifiers truncate to the first element of an input list. Conversely \, a 'list' specifier accepts floats \, symbols or pointers (conceptually these are one element list). Similarly \, a bang message is considered as a zero element list and is also passed via the 'list' argument.;
#X obj 870 381 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X obj 1042 232 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X obj 898 117 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X connect 4 0 5 0;
#X connect 5 0 26 0;
#X connect 5 1 6 0;
#X connect 5 2 25 0;
#X connect 6 0 7 0;
#X connect 7 0 8 1;
#X connect 8 0 9 0;
#X connect 10 0 11 0;
#X connect 11 0 14 0;
#X connect 11 1 13 0;
#X connect 11 2 12 0;
#X connect 19 0 20 0;
#X connect 20 0 55 0;
#X connect 20 1 21 0;
#X connect 22 0 23 0;
#X connect 23 0 56 0;
#X connect 23 1 57 0;
#X connect 25 0 7 1;
#X connect 26 0 8 0;
#X connect 29 0 39 0;
#X connect 30 0 42 0;
#X connect 31 0 39 0;
#X connect 32 0 39 0;
#X connect 33 0 39 0;
#X connect 34 0 40 0;
#X connect 35 0 40 0;
#X connect 36 0 40 0;
#X connect 37 0 40 0;
#X connect 38 0 40 0;
#X connect 39 0 30 0;
#X connect 39 1 71 0;
#X connect 40 0 41 0;
#X connect 40 1 41 0;
#X connect 48 0 52 0;
#X connect 48 1 52 1;
#X connect 50 0 48 0;
#X connect 51 0 52 0;
#X connect 52 0 49 0;
#X connect 70 0 40 0;
#X connect 71 0 42 0;
#X connect 72 0 39 0;
