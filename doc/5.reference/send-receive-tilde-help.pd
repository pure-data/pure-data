#N canvas 496 40 534 588 12;
#X floatatom 318 395 5 0 0 0 - - - 0;
#X obj 34 236 sig~ 50;
#X obj 318 365 snapshot~;
#X obj 318 316 metro 200;
#X obj 34 314 sig~ 25;
#X obj 193 550 tabsend~;
#X obj 115 46 s~;
#X obj 146 46 r~;
#X text 21 550 see also:;
#X obj 153 550 send;
#X obj 97 550 throw~;
#X text 179 45 - abbreviation;
#X obj 318 284 loadbang;
#X obj 420 231 tgl 19 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 1;
#X msg 420 259 \; pd dsp \$1;
#X text 443 230 on/off;
#X floatatom 34 212 5 0 0 0 - - - 0;
#X floatatom 410 395 5 0 0 0 - - - 0;
#X obj 410 365 snapshot~;
#X obj 35 20 send~ x;
#X obj 95 21 receive~ x;
#X obj 34 259 send~ \$0-signal;
#X obj 34 340 send~ signal;
#X msg 178 296 set signal;
#X msg 166 269 set \$1-signal;
#X obj 166 245 f \$0;
#X obj 166 220 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X floatatom 34 289 5 0 0 0 - - - 0;
#N canvas 525 216 510 156 execution-order 0;
#X obj 115 95 ../3.audio.examples/G05.execution.order;
#X text 46 30 You have to get the send~ sorted before the receive~ or else you'll never get less than a block's delay. You can use the strategy given in the example below to control this.;
#X restore 73 387 pd execution-order;
#X obj 166 324 receive~ \$0-signal;
#N canvas 697 108 568 447 reference 0;
#X obj 8 53 cnv 5 550 5 empty empty INLET: 8 18 0 13 #202020 #000000 0;
#X obj 8 97 cnv 2 550 2 empty empty OUTLETS: 8 12 0 13 #202020 #000000 0;
#X obj 6 138 cnv 2 550 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000 0;
#X obj 8 185 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000 0;
#X obj 8 321 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000 0;
#X obj 8 366 cnv 2 550 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000 0;
#X obj 7 421 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000 0;
#X text 146 107 NONE;
#X obj 28 15 send~ y;
#X obj 24 245 receive~ y;
#X obj 8 281 cnv 5 550 5 empty empty INLET: 8 18 0 13 #202020 #000000 0;
#X text 109 294 set <name> - set receive name.;
#X text 139 67 signal - signal to send to matching receive~ object(s).;
#X text 138 332 signal - outputs signal from a matching send~ object.;
#X text 124 142 1) symbol - send symbol name (default: empty symbol).;
#X text 106 376 1) symbol - receive name symbol (default: empty symbol).;
#X text 113 394 2) float - number of channels (default: 1)., f 55;
#X text 131 162 2) float - number of channels (default: 1)., f 52;
#X text 89 15 - send signal(s) to one or more [receive~] objects.;
#X text 107 244 - receive signal(s) from a [send~] object.;
#X restore 335 52 pd reference;
#X text 432 53 <= click;
#X obj 14 87 cnv 1 510 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X obj 14 531 cnv 1 510 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X text 205 224 \$0 needs to be expanded from objects., f 23;
#X text 317 551 updated for Pd version 0.54;
#X obj 410 332 r~ signal;
#N canvas 587 172 505 347 multi-channel 0;
#X floatatom 79 45 5 0 0 0 - - - 0;
#X floatatom 125 45 5 0 0 0 - - - 0;
#X obj 78 279 snapshot~;
#X floatatom 78 305 8 0 0 0 - - - 0;
#X obj 152 279 snapshot~;
#X obj 174 241 metro 250;
#X obj 174 212 loadbang;
#X obj 78 213 unpack~ 2, f 11;
#X obj 79 75 pack~ 2;
#X floatatom 152 305 8 0 0 0 - - - 0;
#X text 305 254 see also:;
#X obj 308 282 pack~;
#X obj 355 282 clone;
#X text 182 23 This example shows how to set number of channels as the 2nd argument \, so it can take a multichannel signal as it's possible with [pack~] or [clone]. Set values on the number boxes to the left., f 39;
#X text 173 117 <-- 2nd argument sets number, f 28;
#X text 201 135 of channels to '2', f 24;
#X text 188 163 <-- 2nd argument sets number;
#X text 216 181 of channels to '2', f 24;
#X obj 79 117 send~ cat 2;
#X obj 78 163 receive~ cat 2;
#X connect 0 0 8 0;
#X connect 1 0 8 1;
#X connect 2 0 3 0;
#X connect 4 0 9 0;
#X connect 5 0 4 0;
#X connect 5 0 2 0;
#X connect 6 0 5 0;
#X connect 7 0 2 0;
#X connect 7 1 4 0;
#X connect 8 0 18 0;
#X connect 19 0 7 0;
#X restore 332 491 pd multi-channel;
#X text 81 492 see multi channel example here -->;
#X text 45 96 A [send~] object copies its input to a local buffer which all [receive~] objects of the same name read from. They may be in different windows or even different patches. Any number of [receive~] may be associated with one [send~] \, but it is an error to have two [send~] objects of the same name. [receive~] takes "set" messages to switch between different [send~] objects. Multi channel connections is supported., f 62;
#X text 47 430 [send~]/[receive~] must have matching block sizes and numbers of channels. Block size is a proprty of the patch and number of channels is specified via a second argument (default 1)., f 62;
#X text 179 21 - one-to-many nonlocal signal(s) connection;
#X connect 1 0 21 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 3 0 18 0;
#X connect 4 0 22 0;
#X connect 12 0 3 0;
#X connect 13 0 14 0;
#X connect 16 0 1 0;
#X connect 18 0 17 0;
#X connect 23 0 29 0;
#X connect 24 0 29 0;
#X connect 25 0 24 0;
#X connect 26 0 25 0;
#X connect 27 0 4 0;
#X connect 29 0 2 0;
#X connect 36 0 18 0;
