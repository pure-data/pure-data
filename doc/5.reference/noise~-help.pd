#N canvas 479 37 533 422 12;
#X declare -stdpath ./;
#X obj 141 208 noise~;
#X obj 141 343 print~;
#X obj 20 17 noise~;
#X text 73 17 - uniformly distributed white noise;
#X msg 105 165 seed 123;
#X text 180 158 seed message to re-seed (so you can get exactly repeatable samples), f 35;
#X text 301 390 updated for Pd version 0.48-2;
#X obj 159 261 output~;
#X obj 105 291 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X obj 360 339 declare -stdpath ./;
#N canvas 691 155 584 206 reference 0;
#X obj 18 52 cnv 5 550 5 empty empty INLET: 8 18 0 13 #202020 #000000 0;
#X obj 18 93 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000 0;
#X obj 18 137 cnv 2 550 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000 0;
#X obj 17 174 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000 0;
#X obj 38 18 noise~;
#X text 91 18 - uniformly distributed white noise;
#X text 91 65 seed <float> - set seed for random number generator.;
#X text 135 103 signal - white noise signal (in the range from -1 to 1).;
#X text 145 148 NONE, f 26;
#X restore 359 16 pd reference;
#X text 453 16 <= click;
#X obj 6 48 cnv 1 520 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X obj 6 378 cnv 1 520 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X text 60 65 [noise~] outputs white noise from a pseudo-random number generator at the audio rate (with output from -1 to 1)., f 57;
#X text 237 278 <-- click and drag to hear and turn DSP on, f 21;
#X text 14 389 see also:;
#X obj 88 389 random;
#X obj 140 389 expr~;
#X obj 188 389 array random;
#N canvas 645 77 476 568 more 0;
#X msg 95 249 seed 1.54312e+07;
#X text 57 101 Seeds are kept locally \, which means that if two [noise~] objects are seeded the same they will have the same output. Conversely \, you can seed the same [noise~] object twice with the same seed to repeat the output., f 52;
#X obj 95 302 noise~;
#X obj 295 316 phasor~ 1;
#X obj 235 295 noise~;
#X obj 235 357 samphold~;
#X obj 235 449 snapshot~;
#X floatatom 235 480 10 0 0 0 - - - 0;
#X obj 315 391 metro 100;
#X obj 315 366 loadbang;
#X obj 95 357 samphold~;
#X obj 95 449 snapshot~;
#X floatatom 95 480 10 0 0 0 - - - 0;
#X msg 355 291 0;
#X text 57 178 If you don't supply a seed each [noise~] object gets its own seed. The example below uses [samphold~] to get random values from [noise~] at a fixed rate., f 52;
#X text 132 527 see also:;
#X obj 207 527 samphold~;
#X msg 235 249 seed 7.31594e+08;
#X msg 358 473 \; pd dsp \$1;
#X obj 358 443 tgl 19 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 1;
#X text 57 22 Pseudo random number generators aren't true random number generators. Instead \, an algorithm is used to provide a sequence of numbers that seems random. The same sequence can be reproduced if you set a "seed" value \, which can be any integer number., f 52;
#X connect 0 0 2 0;
#X connect 0 0 4 0;
#X connect 0 0 13 0;
#X connect 2 0 10 0;
#X connect 3 0 5 1;
#X connect 3 0 10 1;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 8 0 6 0;
#X connect 8 0 11 0;
#X connect 9 0 8 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 13 0 3 1;
#X connect 17 0 4 0;
#X connect 17 0 2 0;
#X connect 17 0 13 0;
#X connect 19 0 18 0;
#X restore 352 198 pd more about seed;
#X f 10;
#X text 293 206 see -->;
#X text 52 107 WARNING: Nothing is known about the quality of this pseudo random number generator. It isn't any standard one!, f 60;
#X connect 0 0 1 0;
#X connect 0 0 7 0;
#X connect 0 0 7 1;
#X connect 4 0 0 0;
#X connect 4 0 8 0;
#X connect 8 0 1 0;
