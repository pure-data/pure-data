#N canvas 193 39 1082 636 12;
#X obj 30 384 netsend;
#X msg 30 198 connect localhost 3000;
#X msg 57 353 send foo \$1;
#X floatatom 57 304 0 0 0 0 - - - 0;
#X msg 46 248 disconnect;
#X msg 241 353 send foo \$1;
#X msg 232 295 disconnect;
#X msg 224 198 connect localhost 3001;
#X floatatom 30 413 0 0 0 0 - - - 0;
#X floatatom 224 413 0 0 0 0 - - - 0;
#X text 727 294 Close the connection;
#X obj 101 604 netreceive;
#X text 25 603 see also:;
#X obj 488 557 netsend 1;
#X text 560 559 (UDP);
#X text 47 535 An old (pre-0.45) calling convention is provided for
compatibility: a single float argument \, "0" or "1" for TCP or UDP
respectively:, f 71;
#X obj 224 384 netsend -u;
#X text 774 385 creation arguments:;
#X text 842 404 optional -u flag for UDP;
#X text 842 423 optional -b flag for binary;
#X floatatom 241 325 4 0 0 0 - - - 0;
#X text 89 292 Send messages to "foo" on remote machine, f 16;
#X msg 431 295 disconnect;
#X floatatom 421 413 0 0 0 0 - - - 0;
#X floatatom 443 325 4 0 0 0 - - - 0;
#X msg 443 353 send 1 2 3 \$1;
#X msg 421 198 connect localhost 3002;
#X msg 647 295 disconnect;
#X floatatom 638 411 0 0 0 0 - - - 0;
#X floatatom 665 326 4 0 0 0 - - - 0;
#X text 687 177 UDP \, binary;
#X obj 638 384 netsend -u -b;
#X text 470 177 TCP \, binary;
#X text 797 190 Connect to "localhost" port number, f 22;
#X obj 421 384 netsend -b;
#X msg 626 198 connect localhost 3003;
#X text 535 52 By default the messages are ASCII text messages compatible
with Pd (i.e. \, numbers and symbols terminated with a semicolon --
the "FUDI" protocol). The "-b" creation argument specifies binary messages
instead \, which appear in Pd as lists of numbers from 0 to 255 (You
could use this to send OSC messages \, for example.), f 74;
#X obj 488 413 print backwards;
#X text 47 454 First outlet is nonzero if connection is open \, zero
otherwise., f 71;
#X obj 726 414 print backwards;
#X text 47 474 Second outlet outputs messages sent back from netreceive
object. In TCP mode this works for any established connection. In UDP
you have to send at least one message forward through the connection
for backwards messages to find their way back., f 71;
#X msg 638 248 connect localhost 3003 3010;
#X text 839 232 an additional port argument;
#X text 841 264 messages sent back from receiver;
#X text 839 248 specifies port number for;
#X obj 37 12 netsend;
#X text 94 11 - send Pd messages over a network;
#X text 535 127 The Pd distribution includes "pdsend" and "pdreceive"
standalone programs that work with netsend/netreceive in FUDI mode.
, f 74;
#X text 81 177 TCP \, FUDI;
#X text 299 177 UDP \, FUDI;
#X msg 369 248 timeout 3000;
#X text 464 237 TCP connect timeout (ms) - don't set it too low!,
f 19;
#X text 732 353 lists work like "send" (as of Pd 0.51);
#X text 853 604 updated for Pd version 0.51.;
#X text 638 467 As of 0.51 \, Pd supports IPv6 addresses \, netsend
-u (UDP) is fully "connectionless" and no longer closes if no one receives
a UDP message \, and netsend (TCP) has a settable connect timeout which
defaults to 10 seconds., f 57;
#N canvas 753 154 538 456 IP 1;
#X obj 58 374 netsend -u;
#X msg 154 282 disconnect;
#X text 331 213 IPv4 multicast;
#X text 309 245 IPv6 multicast;
#X msg 258 318 send \$1;
#X floatatom 258 283 5 0 0 0 - - - 0;
#X msg 138 246 connect ff00::114 3005;
#X msg 118 214 connect 239.200.200.200 3005;
#X msg 100 178 connect ::1 3005;
#X msg 81 144 connect 127.0.0.1 3005;
#X msg 58 110 connect localhost 3005;
#X text 230 109 IPv4 messages (default);
#X text 251 143 IPv4 messages;
#X text 233 177 IPv6 messages;
#X obj 377 369 netsend;
#X msg 390 339 send \$1;
#X floatatom 390 315 5 0 0 0 - - - 0;
#X msg 377 288 connect ::1 3005;
#X text 20 16 As of Pd 0.51 \, netsend supports sending IPv6 and multicast
messages. Also \, it will try to detect the IP version based on the
given address or hostname. Hostname resolution favors IPv4 results
for backwards compatibility., f 70;
#X connect 1 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 4 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 8 0 0 0;
#X connect 9 0 0 0;
#X connect 10 0 0 0;
#X connect 15 0 14 0;
#X connect 16 0 15 0;
#X connect 17 0 14 0;
#X restore 745 546 pd IP version and multicast;
#X obj 10 41 cnv 1 1060 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X text 985 10 <= click;
#N canvas 570 116 740 379 reference 0;
#X obj 8 42 cnv 5 720 5 empty empty INLET: 8 18 0 13 #202020 #000000
0;
#X obj 8 176 cnv 2 720 2 empty empty OUTLETS: 8 12 0 13 #202020 #000000
0;
#X obj 8 268 cnv 2 720 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000
0;
#X obj 7 346 cnv 5 720 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X obj 7 202 cnv 1 720 1 empty empty 1st: 8 12 0 13 #9f9f9f #000000
0;
#X obj 7 233 cnv 1 720 1 empty empty 2nd: 8 12 0 13 #9f9f9f #000000
0;
#X obj 7 293 cnv 1 720 1 empty empty flags: 8 12 0 13 #9f9f9f #000000
0;
#X text 108 127 send <anything> -;
#X text 207 300 -u: sets UDP connection (default TCP)., f 43;
#X text 185 147 list -;
#X text 235 147 works like 'send'., f 64;
#X obj 28 11 netsend;
#X text 85 10 - send Pd messages over a network;
#X text 188 207 float - nonzero if connection is open \, zero otherwise.
, f 57;
#X text 167 239 anything - messages sent back from netreceive objects.
;
#X text 207 318 -b: sets to binary mode (default 'FUDI')., f 43;
#X text 116 57 connect <list> -;
#X text 235 127 sends messages over the network., f 64;
#X text 144 89 disconnect - close the connection., f 77;
#X text 109 108 timeout <float> - TCP connect timeout in ms (default
10000)., f 82;
#X text 235 56 sets host and port number \, an additional port argument
can be set for messages sent back from the receiver., f 64;
#X restore 891 10 pd reference;
#X obj 10 590 cnv 1 1060 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X obj 76 413 print backwards;
#X text 15 56 The netsend object sends TCP ("stream") or UDP ("datagram")
messages over the network \, which can be received by netreceive objects
in other patches (which may be running on another machine). An outlet
reports whether the connection is open or not. A connection request
should specify the name or IP address of the other host and the port
number. There should be a "netreceive" on the remote host with a matching
port number., f 70;
#X obj 291 413 print backwards;
#X msg 665 353 1 2 3 \$1;
#X obj 262 604 fudiformat;
#X obj 186 604 oscformat;
#X connect 0 0 8 0;
#X connect 0 1 60 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 0 0;
#X connect 5 0 16 0;
#X connect 6 0 16 0;
#X connect 7 0 16 0;
#X connect 16 0 9 0;
#X connect 16 1 62 0;
#X connect 20 0 5 0;
#X connect 22 0 34 0;
#X connect 24 0 25 0;
#X connect 25 0 34 0;
#X connect 26 0 34 0;
#X connect 27 0 31 0;
#X connect 29 0 63 0;
#X connect 31 0 28 0;
#X connect 31 1 39 0;
#X connect 34 0 23 0;
#X connect 34 1 37 0;
#X connect 35 0 31 0;
#X connect 41 0 31 0;
#X connect 50 0 34 0;
#X connect 63 0 31 0;
