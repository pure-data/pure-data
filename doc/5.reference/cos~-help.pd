#N canvas 530 100 512 524 12;
#X declare -stdpath ./;
#X obj 23 12 cos~;
#X obj 163 312 snapshot~;
#X obj 86 215 sig~;
#X floatatom 163 338 10 0 0 0 - - - 0;
#X floatatom 86 184 10 0 0 0 - - - 0;
#X text 123 215 convert to audio;
#X text 14 478 see also:;
#X obj 164 478 osc~;
#X obj 203 478 tabread4~;
#X text 303 476 updated for Pd version 0.41;
#X obj 87 478 cos;
#X obj 118 478 expr~;
#X msg 320 255 \; pd dsp \$1;
#X obj 7 43 cnv 1 500 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#N canvas 683 179 572 208 reference 0;
#X obj 10 44 cnv 5 550 5 empty empty INLET: 8 18 0 13 #202020 #000000 0;
#X obj 10 96 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000 0;
#X obj 10 146 cnv 2 550 2 empty empty ARGUMENT: 8 12 0 13 #202020 #000000 0;
#X obj 10 183 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000 0;
#X obj 28 15 cos~;
#X text 88 64 signal - input from 0-1 (wraps into 0-1 if outside this range)., f 63;
#X text 118 156 1) float - sets input value;
#X text 88 113 signal - cosine output according to the input., f 63;
#X text 75 14 - cosine wavetable.;
#X restore 396 12 pd reference;
#X obj 7 463 cnv 1 500 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X text 328 11 click =>;
#X obj 86 256 cos~;
#X text 242 339 <-- output of the [cos~] object;
#X text 263 155 <-- scroll to set input value, f 16;
#X text 64 11 - cosine wavetable;
#X text 30 50 The [cos~] object is a cosine wavetable reader. The input is a linear index from 0 to 1 and you can also consider it a cosine trigonometric function of the input multiplied by two pi., f 64;
#X obj 89 156 hsl 162 19 0 1 0 0 empty empty empty -2 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 163 277 metro 100;
#X obj 163 247 loadbang;
#X text 30 101 For a proper cosine function with input in radians and other trigonometric functions \, see [expr~]., f 64;
#X obj 320 219 set-dsp-tgl;
#X text 351 223 DSP on/off;
#X text 42 379 You can use [cos~] in conjunction with [phasor~] to implement an osicllator just like [osc~] \, but you then have acess to the phase signal and this way you can also achieve phase moculation \, see example in the subpatch -->, f 61;
#N canvas 748 225 517 356 phasemod 0;
#X obj 102 137 +~;
#X obj 102 184 cos~;
#X obj 102 232 output~;
#X obj 97 310 declare -stdpath ./;
#X floatatom 102 57 5 0 0 0 - - - 0;
#X obj 102 98 phasor~ 400;
#X obj 217 98 osc~ 50;
#X obj 217 149 *~;
#X obj 294 173 line~;
#X msg 294 144 \$1 10;
#X floatatom 294 113 8 0 0 0 - - - 0;
#X obj 297 84 hsl 162 19 0 1 0 0 empty empty empty -2 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 294 27 loadbang;
#X msg 294 56 0.5;
#X floatatom 217 57 5 0 0 0 - - - 0;
#X text 96 36 carrier;
#X text 203 34 modulator;
#X text 356 114 index;
#X text 283 222 This is a simple phase modulation patch., f 22;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 4 0 5 0;
#X connect 5 0 0 0;
#X connect 6 0 7 0;
#X connect 7 0 0 1;
#X connect 8 0 7 1;
#X connect 9 0 8 0;
#X connect 10 0 9 0;
#X connect 11 0 10 0;
#X connect 12 0 13 0;
#X connect 13 0 11 0;
#X connect 14 0 6 0;
#X restore 364 429 pd phasemod;
#X connect 1 0 3 0;
#X connect 2 0 17 0;
#X connect 4 0 2 0;
#X connect 17 0 1 0;
#X connect 22 0 4 0;
#X connect 23 0 1 0;
#X connect 24 0 23 0;
#X connect 26 0 12 0;
