#N struct template2 float x float y;
#N struct template1 float x float y float z;
#N struct pointer-template3 float x float y float z array array1 pointer-template3-element 1 text list1;
#N struct pointer-template3-element float x float y text list2;
#N canvas 329 68 1035 727 12;
#X text 365 676 see also:;
#X obj 31 11 pointer;
#N canvas 379 131 422 137 pointer-template1 0;
#X obj 74 76 filledpolygon z 0 1 0 0 20 0 20 30 0 30;
#X obj 60 23 struct template1 float x float y float z;
#X restore 824 605 pd pointer-template1;
#N canvas 566 400 413 122 pointer-template2 0;
#X obj 40 67 filledcurve 909 0 0 0 0 30 30 60 0 30 -30 0 0;
#X obj 60 21 struct template2 float x float y;
#X restore 824 628 pd pointer-template2;
#X obj 539 677 get;
#X obj 568 677 set;
#X obj 488 677 append;
#X obj 597 677 getsize;
#X obj 654 678 setsize;
#X obj 710 678 element;
#N canvas 186 180 312 185 pointer-data 1;
#X scalar template2 21 97 \;;
#X scalar template1 80 17 90 \;;
#X scalar template1 120 117 9 \;;
#X restore 824 583 pd pointer-data;
#X obj 58 554 pointer;
#X msg 12 199 traverse pd-pointer-data;
#X msg 58 251 next;
#X obj 58 579 print out1;
#X obj 138 578 print out2;
#X msg 606 374 next;
#X msg 653 374 traverse pd-pointer-data;
#X obj 606 429 print template1;
#X obj 721 430 print template2;
#X obj 837 429 print other;
#X obj 928 430 print bangout;
#X text 202 198 sets to the "head" of the list;
#X msg 89 470 send pointer-help;
#X text 65 225 output current value;
#X obj 366 471 r pointer-help;
#X obj 366 496 print pointer-help;
#X msg 91 522 send-window vis \$1;
#X obj 91 498 tgl 19 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 1;
#X msg 77 306 delete;
#N canvas 764 193 602 411 equal_message 0;
#X obj 304 212 pointer;
#X msg 304 146 traverse pd-pointer-data \, bang;
#X msg 314 183 next;
#X obj 33 212 pointer;
#X msg 33 146 traverse pd-pointer-data \, bang;
#X msg 43 183 next;
#X msg 33 240 equal \$1;
#X obj 118 286 pointer template1 template2;
#X text 375 114 1) select a source;
#X text 32 105 2) compare different pointers with source, f 20;
#X obj 180 327 print equal;
#X obj 304 327 print not-equal;
#X text 321 277 you can also use template symbols, f 17;
#X obj 304 115 loadbang;
#X text 34 21 The "equal" message allows one to compare an incoming pointer with the stored pointer. On success \, the pointer is sent to its corresponding outlet. On fail \, a bang is sent through the rightmost outlet., f 71;
#X connect 0 0 7 1;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 6 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 6 0 7 0;
#X connect 7 0 10 0;
#X connect 7 1 10 0;
#X connect 7 2 10 0;
#X connect 7 3 11 0;
#X connect 13 0 1 0;
#X restore 822 230 pd equal_message;
#X obj 130 548 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X text 610 8 <= click;
#N canvas 708 63 690 894 reference 0;
#X obj 29 18 pointer;
#X text 98 331 send <symbol> -;
#X obj 8 52 cnv 5 550 5 empty empty INLETS: 8 18 0 13 #202020 #000000 0;
#X obj 8 490 cnv 2 550 2 empty empty OUTLETS: 8 12 0 13 #202020 #000000 0;
#X obj 8 609 cnv 2 550 2 empty empty ARGUMENTS\ FOR\ POINTER: 8 12 0 13 #202020 #000000 0;
#X obj 7 771 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000 0;
#X obj 7 450 cnv 1 550 1 empty empty 2nd: 8 12 0 13 #7c7c7c #000000 0;
#X obj 7 85 cnv 1 550 1 empty empty 1st: 8 12 0 13 #7c7c7c #000000 0;
#X text 157 89 bang - output the current value., f 62;
#X text 97 220 vnext <float> -;
#X text 147 300 delete -;
#X text 209 298 delete the current object and output the next (or send a "bang" to the right outlet if it was the last one)., f 55;
#X text 70 350 send-window <any> -;
#X text 209 348 send any message to the canvas containing the scalar., f 55;
#X text 84 369 equal <pointer> -;
#X text 209 367 compare an incoming pointer with the stored pointer., f 55;
#X text 83 460 pointer - store the pointer value (no output)., f 49;
#X text 85 494 'n' number of outlets depend on creation arguments;
#X obj 7 517 cnv 1 550 1 empty empty 'n': 8 12 0 13 #7c7c7c #000000 0;
#X text 17 634 1) list -;
#X obj 7 547 cnv 1 550 1 empty empty 'n'+1: 8 12 0 13 #7c7c7c #000000 0;
#X text 111 523 pointer - pointers of matching templates.;
#X text 111 553 pointer - pointers for non matching templates.;
#X obj 7 578 cnv 1 550 1 empty empty rightmost: 8 12 0 13 #7c7c7c #000000 0;
#X text 209 330 send pointer to a receive name given by the symbol., f 55;
#X text 67 108 traverse <symbol> -;
#X text 85 634 template names. The number of templates creates 'n' corresponding outlets plus an extra outlet for non matching templates. If no argument is given \, only one outlet is created besides rightmost., f 65;
#X text 131 584 bang - when reaching the end of a list.;
#X text 205 107 sets to the a canvas' "head" of the list \, the symbol needs to be in the format 'pd-canvasname'., f 55;
#X text 147 416 rewind -;
#X obj 91 19 vpointer;
#X text 17 716 1) symbol - shared name between vpointers;
#X text 17 738 2) list -;
#X text 85 738 as above for "pointer", f 65;
#X text 11 693 ARGUMENTS FOR VPOINTER:;
#X text 85 396 equal <pointer> -;
#X text 205 139 move and output next pointer or "bang" to right outlet if we reach the end of the list. Optional "count" to specify number of items forward \, "template" to filter for a specific template \, and "selected" \, nonzero to specify filtering for a selected item., f 55;
#X text 208 221 short for "next 1 - <float>., f 55;
#X text 55 281 [<field2> <value2>...;
#X text 14 267 set <field> <value>;
#X text 215 280 set value of one or more field, f 55;
#X text 27 244 get <field> [field2...] -;
#X text 210 245 get one or more field values. The result appears as a list out the rightmost outlet., f 49;
#X text 209 414 goes back to the head of the list and output its pointer (only if pointer is currently set);
#X text 37 161 [template] [selected] -;
#X text 11 140 next [count];
#X text 151 17 - store the location of a scalar.;
#X restore 516 9 pd reference;
#X obj 19 664 cnv 1 1000 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X obj 606 403 pointer template1 template2, f 50;
#X text 104 244 move forward one item and output its pointer \, or send a "bang" to the right outlet if we reach the end of the list., f 63;
#X text 130 300 delete the current object and output the next one (or send a "bang" to right outlet if it was the last one in the list);
#X text 606 333 Optional arguments to [pointer] allow you to select according to the template of the scalar being output:;
#X obj 42 225 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X text 218 470 send pointer to a receive name -->, f 19;
#X msg 67 279 rewind;
#X obj 95 12 vpointer;
#X text 162 12 reference or access scalar objects;
#X text 832 679 updated for Pd version 0.55;
#X text 206 128 The value of a [pointer] can be either a real scalar \, or else the "head" (before the first element) of the list \, which allows you to point to an empty list (for instance to append a scalar to the beginning of the list). Pointers are "safe": if you delete a scalar \, pointers to it (and to any other scalar in the same window) are marked as invalid., f 94;
#X obj 605 524 vpointer pointer-name;
#X obj 791 525 vpointer pointer-name template1;
#X text 600 471 vpointers are like pointers \, with an added first argument that names them. [vpointer] objects that share a name refer to the same pointer.;
#X msg 84 337 nearest 40 50;
#X text 641 231 testing pointer equality;
#N canvas 588 67 963 769 set_and_get 0;
#N canvas 214 452 568 355 pointer-template3 0;
#X obj 87 124 filledpolygon 900 0 1 0 0 20 0 20 30 0 30;
#X obj 86 156 drawtext list1 25 0 0 list1=;
#X msg 141 275 \; pd-set_and_get scalar pointer-template3 50 50 \\\;;
#X obj 83 203 plot array1 0 1 25 20;
#X obj 87 48 struct pointer-template3 float x float y float z array array1 pointer-template3-element list list1;
#X restore 599 639 pd pointer-template3;
#N canvas 719 449 538 300 pointer-template3-element 0;
#X obj 87 48 struct pointer-template3-element float x float y list list2;
#X obj 86 156 drawtext list2 25 0 0 list2=;
#X restore 598 669 pd pointer-template3-element;
#X msg 549 166 traverse pd-set_and_get \, next \, get list1;
#X obj 549 191 pointer;
#X listbox 610 199 20 0 0 0 - - - 0;
#X obj 549 338 pointer;
#X listbox 610 346 20 0 0 0 - - - 0;
#X obj 550 287 hradio 20 1 0 3 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0;
#X msg 549 313 traverse pd-set_and_get \, next \, get array1 \$1 list2;
#X obj 547 512 pointer;
#X msg 547 487 traverse pd-set_and_get \, next \, set list1 1 \$1 3 four five;
#X floatatom 547 464 5 0 0 0 - - - 0;
#X obj 546 587 pointer;
#X floatatom 546 539 5 20 500 0 - - - 0;
#X scalar pointer-template3 57 26 0 \; 0 0 \; 1 2 3 \; 53 62 \; not my circus \; 112 34 \; not my monkeys \; \; 1 2 3 four five \;;
#X obj 551 256 pointer;
#X listbox 612 264 20 0 0 0 - - - 0;
#X msg 551 231 traverse pd-set_and_get \, next \, get x y list1;
#X text 31 155 The "get" and "set" messages can get or set one or more values (numbers \, symbols \, or lists) into or out of a scalar. The arguments to "get" are the names of the fields desired \, for instance "list1" in the two examples here. (Note that the first two messages are to set the pointer to the single scalar that is in this window)., f 71;
#X text 33 283 You can get data out of array elements using a single "get" message by naming the field of the array (array1) \, the element number (\$1 \, set by the radio buttons in this example) and finally the field name of the array element (list2)., f 71;
#X obj 548 438 pointer;
#X floatatom 548 390 5 -20 80 0 - - - 0;
#X msg 548 413 traverse pd-set_and_get \, next \, set array1 1 y \$1;
#X text 31 395 To set one or more fields \, send "set" with a field name and a value \, which may be repeated as desired. To set a field within an array \, name the array \, the element number \, and the field of the array element like this. (You can enter sub-arrays recursively too). If you set a text field the remaining arguments of the message become the new text (so that should be the last thing you set in this message)., f 71;
#X text 97 631 here are the templates. The object belongs to "template3" and has x \, y \, "list1" \, and "array1" as fields. Array1 has elements whose template \, "pointer-template3-element" \, has x \, y \, and "list2" fields.;
#X text 662 385 set list1;
#X text 663 454 change an array element;
#X text 653 534 set x and list1 both;
#X msg 546 562 traverse pd-set_and_get \, next \, set x \$1 list1 x is \$1;
#X connect 2 0 3 0;
#X connect 3 1 4 0;
#X connect 5 1 6 0;
#X connect 7 0 8 0;
#X connect 8 0 5 0;
#X connect 10 0 9 0;
#X connect 11 0 10 0;
#X connect 13 0 28 0;
#X connect 15 1 16 0;
#X connect 17 0 15 0;
#X connect 21 0 22 0;
#X connect 22 0 20 0;
#X connect 28 0 12 0;
#X restore 822 278 pd set_and_get;
#X text 117 279 go back to the head of the list containing current pointer;
#X msg 91 362 equal;
#X text 139 361 test equality of two pointers;
#X text 702 256 more on "next";
#N canvas 756 239 868 527 next_message 0;
#X floatatom 256 404 5 0 0 0 - - - 0;
#X floatatom 301 407 5 0 0 0 - - - 0;
#X msg 127 40 traverse pd-pointer-data \, next;
#X floatatom 127 398 5 0 0 0 - - - 0;
#X floatatom 172 401 5 0 0 0 - - - 0;
#X floatatom 214 401 5 0 0 0 - - - 0;
#X obj 407 343 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 380 344 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 127 295 pointer template1 template2;
#X obj 127 339 get template1 x y z, f 13;
#X msg 150 263 next;
#X text 353 32 start and get next scalar (outputs first in window if any), f 32;
#X msg 136 81 traverse pd-pointer-data \, next 2;
#X text 376 84 "next 2" to go forward 2 scalars;
#X text 452 110 "next 2 template1" to go forward to second scalar whose template is template1;
#X msg 146 111 traverse pd-pointer-data \, next 2 template1;
#X obj 256 345 get template2 x y, f 13;
#X obj 128 426 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 256 428 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X msg 156 146 traverse pd-pointer-data \, next 1 - 1;
#X text 425 144 third argument nonzero to search for a selected element. (The window must be visible for this to work). Here \, the template "-" means "match any template".;
#X msg 161 212 traverse pd-pointer-data \, vnext 1;
#X text 412 214 "vnext" is short for "next 1 -" - a nonzero argument means search for next selected object., f 48;
#X text 191 261 "next" is equivalent to "next 1 - 0".;
#X connect 0 0 18 0;
#X connect 2 0 8 0;
#X connect 3 0 17 0;
#X connect 8 0 9 0;
#X connect 8 1 16 0;
#X connect 8 2 7 0;
#X connect 8 3 6 0;
#X connect 9 0 3 0;
#X connect 9 1 4 0;
#X connect 9 2 5 0;
#X connect 10 0 8 0;
#X connect 12 0 8 0;
#X connect 15 0 8 0;
#X connect 16 0 0 0;
#X connect 16 1 1 0;
#X connect 19 0 8 0;
#X connect 21 0 8 0;
#X restore 822 253 pd next_message;
#X text 154 547 output of "get" message or bang on end-of-list;
#X obj 437 676 struct;
#X msg 97 387 get x y;
#X text 156 387 get fields of a scalar;
#X floatatom 100 412 5 20 300 0 - - - 0;
#X text 166 439 set them;
#X msg 100 436 set x \$1;
#X text 644 281 more on "set" and "get";
#X text 592 583 templates used in this example:;
#X obj 6 46 cnv 1 1000 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X text 186 339 find and output the scalar nearest to (x \, y);
#X text 224 522 send a message to the containing canvas;
#X text 206 51 [pointer] manages a reference to a scalar object (as defined by a [struct] object). The right inlet takes a pointer and stores it. A bang outputs it \, and a pointer to the main inlet does both. "set" and "get" messages allow accessing or modifying the scalar. "traverse" \, "next" \, and "nearest" allow initializing the reference or moving it from scalar to scalar within a window., f 94;
#X connect 11 0 14 0;
#X connect 11 1 31 0;
#X connect 11 1 15 0;
#X connect 12 0 11 0;
#X connect 13 0 11 0;
#X connect 16 0 35 0;
#X connect 17 0 35 0;
#X connect 23 0 11 0;
#X connect 25 0 26 0;
#X connect 27 0 11 0;
#X connect 28 0 27 0;
#X connect 29 0 11 0;
#X connect 35 0 18 0;
#X connect 35 1 19 0;
#X connect 35 2 20 0;
#X connect 35 3 21 0;
#X connect 39 0 11 0;
#X connect 41 0 11 0;
#X connect 49 0 11 0;
#X connect 53 0 11 0;
#X connect 59 0 11 0;
#X connect 61 0 63 0;
#X connect 63 0 11 0;
