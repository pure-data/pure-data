# On Mac OS X, this needs to be defined to enable dlopen and weak linking
# support.  Its safe on other platforms since gcc only checks this env var on
# Apple's gcc.  <hans@at.or.at>
export MACOSX_DEPLOYMENT_TARGET = 10.3

VPATH = ../obj:./
OBJ_DIR = ../obj
BIN_DIR = ../bin
PDEXEC = $(BIN_DIR)/pd
EXT= pd_darwin
GUINAME= libPdTcl.dylib
ARCH= -arch i386 -arch ppc
EXTRAARCH= -arch i386 -arch x86_64 -arch ppc

MKDIR_P = mkdir -p

prefix = /usr/local
exec_prefix = ${prefix}
bindir = ${exec_prefix}/bin
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/man

# variables to match packages/Makefile.buildlayout so that they can be easily
# overridden when building Pd-extended builds. <hans@at.or.at>
libpddir = $(libdir)/pd
pddocdir = $(libpddir)/doc
libpdbindir = $(libpddir)/bin
libpdtcldir = $(libpddir)/tcl

PADIR = ../portaudio/portaudio
PMDIR = ../portmidi/portmidi

CPPFLAGS = -DPD -DINSTALL_PREFIX=\"$(prefix)\" \
    -DHAVE_LIBDL -DMACOSX -DHAVE_UNISTD_H -I/usr/X11R6/include \
    -I$(PADIR)/include -I$(PADIR)/src/common  \
    -I$(PADIR)/src/os/mac_osx/ -I$(PMDIR)/pm_common \
    -I$(PMDIR)/pm_mac -I$(PMDIR)/porttime \
    -DUSEAPI_PORTAUDIO -DPA_USE_COREAUDIO -DNEWBUFFER
ARCH_CFLAGS = $(ARCH) 
WARN_CFLAGS = -Wall -W -Wstrict-prototypes -Wno-unused -Wno-unused-parameter \
     -Wno-parentheses -Wno-switch
MORECFLAGS = -Wno-error -ffast-math -O3

LDFLAGS = -Wl -framework CoreAudio -framework AudioUnit \
    -framework AudioToolbox -framework Carbon -framework CoreMIDI \
    -framework CoreFoundation $(ARCH) \

LIB = -ldl -lm -lpthread

ifdef JACK
CPPFLAGS += -DUSEAPI_JACK
SYSSRC += s_audio_jack.c
LIB += -weak_framework Jackmp
endif

CFLAGS = $(ARCH_CFLAGS) $(WARN_CFLAGS) $(CPPFLAGS) $(MORECFLAGS)

# the sources

SYSSRC += s_midi_pm.c s_audio_pa.c s_audio_paring.c    \
    $(PADIR)/src/common/pa_allocation.c  \
    $(PADIR)/src/common/pa_converters.c  \
    $(PADIR)/src/common/pa_cpuload.c     \
    $(PADIR)/src/common/pa_dither.c      \
    $(PADIR)/src/common/pa_front.c       \
    $(PADIR)/src/common/pa_process.c     \
    $(PADIR)/src/common/pa_stream.c      \
    $(PADIR)/src/common/pa_trace.c       \
    $(PADIR)/src/common/pa_debugprint.c  \
    $(PADIR)/src/common/pa_ringbuffer.c  \
    $(PADIR)/src/os/unix/pa_unix_util.c  \
    $(PADIR)/src/os/unix/pa_unix_hostapis.c                \
    $(PADIR)/src/hostapi/coreaudio/pa_mac_core.c           \
    $(PADIR)/src/hostapi/coreaudio/pa_mac_core_blocking.c  \
    $(PADIR)/src/hostapi/coreaudio/pa_mac_core_utilities.c \
    $(PMDIR)/pm_mac/pmmac.c           \
    $(PMDIR)/pm_mac/pmmacosxcm.c      \
    $(PMDIR)/pm_mac/finddefault.c     \
    $(PMDIR)/pm_mac/readbinaryplist.c \
    $(PMDIR)/pm_common/pmutil.c       \
    $(PMDIR)/pm_common/portmidi.c     \
    $(PMDIR)/porttime/ptmacosx_cf.c


SRC = g_canvas.c g_graph.c g_text.c g_rtext.c g_array.c g_template.c g_io.c \
    g_scalar.c g_traversal.c g_guiconnect.c g_readwrite.c g_editor.c g_clone.c \
    g_all_guis.c g_bang.c g_mycanvas.c g_numbox.c \
    g_radio.c g_slider.c g_toggle.c g_undo.c g_vumeter.c \
    g_editor_extras.c \
    m_pd.c m_class.c m_obj.c m_atom.c m_memory.c m_binbuf.c \
    m_conf.c m_glob.c m_sched.c \
    s_main.c s_inter.c s_inter_gui.c s_file.c s_print.c \
    s_loader.c s_path.c s_entry.c s_audio.c s_midi.c s_net.c s_utf8.c \
    d_ugen.c d_ctl.c d_arithmetic.c d_osc.c d_filter.c d_dac.c d_misc.c \
    d_math.c d_fft.c d_fft_fftsg.c d_array.c d_global.c \
    d_delay.c d_resample.c d_soundfile.c d_soundfile_aiff.c d_soundfile_caf.c \
    d_soundfile_next.c d_soundfile_wave.c \
    x_arithmetic.c x_connective.c x_interface.c x_midi.c x_misc.c \
    x_time.c x_acoustics.c x_net.c x_text.c x_gui.c x_list.c x_array.c \
    x_file.c x_scalar.c  x_vexp.c x_vexp_if.c x_vexp_fun.c \
    $(SYSSRC)

OBJ = $(SRC:.c=.o) 

# get version from m_pd.h to use in doc/1.manual/1.introduction.txt
PD_MAJOR_VERSION := $(shell grep PD_MAJOR_VERSION m_pd.h | \
	sed 's|^.define *PD_MAJOR_VERSION *\([0-9]*\).*|\1|' )
PD_MINOR_VERSION := $(shell grep PD_MINOR_VERSION m_pd.h | \
	sed 's|^.define *PD_MINOR_VERSION *\([0-9]*\).*|\1|' )
PD_BUGFIX_VERSION := $(shell grep PD_BUGFIX_VERSION m_pd.h | \
	sed 's|^.define *PD_BUGFIX_VERSION *\([0-9]*\).*|\1|' )
PD_TEST_VERSION := $(shell grep PD_TEST_VERSION m_pd.h | \
	sed 's|^.define *PD_TEST_VERSION *"\(.*\)".*|\1|' )
PD_VERSION := $(PD_MAJOR_VERSION).$(PD_MINOR_VERSION).$(PD_BUGFIX_VERSION)
ifneq ($(PD_TEST_VERSION),)
	PD_VERSION := $(PD_VERSION)-$(PD_TEST_VERSION)
endif

#
#  ------------------ targets ------------------------------------
#

.PHONY: pd gui externs all

all: pd $(BIN_DIR)/pd-watchdog gui $(BIN_DIR)/pdsend \
    $(BIN_DIR)/pdreceive externs

bin: pd $(BIN_DIR)/pd-watchdog gui $(BIN_DIR)/pdsend \
    $(BIN_DIR)/pdreceive

$(OBJ) : %.o : %.c
	$(CC) $(CFLAGS) $(INCLUDE) -c -o $(OBJ_DIR)/$*.o $*.c 

$(OBJ): $(OBJ_DIR)

$(OBJ_DIR):
	$(MKDIR_P) $@

pd: $(PDEXEC)

pd-watchdog: $(BIN_DIR)/pd-watchdog

$(BIN_DIR):
	test -d $(BIN_DIR) || mkdir -p $(BIN_DIR)

$(BIN_DIR)/pd-watchdog: s_watchdog.c $(BIN_DIR)
	$(CC) $(CFLAGS) $(STRIPFLAG) -o $(BIN_DIR)/pd-watchdog s_watchdog.c

$(BIN_DIR)/pdsend: u_pdsend.c s_net.c $(BIN_DIR)
	$(CC) $(CFLAGS) $(STRIPFLAG) -o $(BIN_DIR)/pdsend u_pdsend.c s_net.c

$(BIN_DIR)/pdreceive: u_pdreceive.c s_net.c $(BIN_DIR)
	$(CC) $(CFLAGS) $(STRIPFLAG) -o $(BIN_DIR)/pdreceive u_pdreceive.c s_net.c

$(PDEXEC): $(OBJ) $(BIN_DIR)
	cd ../obj;  $(CC) $(LDFLAGS) $(DBG_CFLAGS) -o $(PDEXEC) $(OBJ) $(LIB)

EXTERNTYPE=d_fat
externs: 
	make -C ../extra/bonk~    DARWINARCH="$(EXTRAARCH)" $(EXTERNTYPE)
	make -C ../extra/choice   DARWINARCH="$(EXTRAARCH)" $(EXTERNTYPE)
	make -C ../extra/fiddle~  DARWINARCH="$(EXTRAARCH)" $(EXTERNTYPE)
	make -C ../extra/loop~    DARWINARCH="$(EXTRAARCH)" $(EXTERNTYPE)
	make -C ../extra/lrshift~ DARWINARCH="$(EXTRAARCH)" $(EXTERNTYPE)
	make -C ../extra/pique    DARWINARCH="$(EXTRAARCH)" $(EXTERNTYPE)
	make -C ../extra/sigmund~ DARWINARCH="$(EXTRAARCH)" $(EXTERNTYPE)
	make -C ../extra/pd~      DARWINARCH="$(EXTRAARCH)" $(EXTERNTYPE)
	make -C ../extra/stdout   DARWINARCH="$(EXTRAARCH)" $(EXTERNTYPE)
	make -C ../extra/bob~     DARWINARCH="$(EXTRAARCH)" $(EXTERNTYPE)

BINARYMODE=-m755

ABOUT_FILE=$(DESTDIR)$(pddocdir)/1.manual/1.introduction.txt
install:  all
	install -d $(DESTDIR)$(libpdbindir)
	-install $(BIN_DIR)/$(GUINAME) $(DESTDIR)$(libpdbindir)/$(GUINAME)
	install $(BIN_DIR)/pd-watchdog $(DESTDIR)$(libpdbindir)/pd-watchdog
	install -d $(DESTDIR)$(bindir)
	install $(BINARYMODE) $(PDEXEC) $(DESTDIR)$(bindir)/pd
	install -m755 $(BIN_DIR)/pdsend $(DESTDIR)$(bindir)/pdsend
	install -m755 $(BIN_DIR)/pdreceive $(DESTDIR)$(bindir)/pdreceive 
	install -d $(DESTDIR)$(libpdtcldir)
	install ../tcl/* $(DESTDIR)$(libpdtcldir)
	for dir in $(shell ls -1 ../doc | grep -v CVS); do \
		echo "installing $$dir"; \
		install -d $(DESTDIR)$(pddocdir)/$$dir ; \
		install -m644 -p ../doc/$$dir/*.* $(DESTDIR)$(pddocdir)/$$dir ; \
	done
	for dir in $(shell ls -1 ../doc/7.stuff | grep -v CVS); do \
		echo "installing 7.stuff/$$dir"; \
		install -d $(DESTDIR)$(pddocdir)/7.stuff/$$dir ; \
		install -m644 -p ../doc/7.stuff/$$dir/*.* \
                    $(DESTDIR)$(pddocdir)/7.stuff/$$dir ; \
	done
	mv $(ABOUT_FILE) $(ABOUT_FILE).tmp
	cat $(ABOUT_FILE).tmp | sed 's|PD_VERSION|Pd version $(PD_VERSION)|' \
		> $(ABOUT_FILE)
	rm $(ABOUT_FILE).tmp
	cp -pr ../extra $(DESTDIR)$(libpddir)/
	rm -f $(DESTDIR)$(libpddir)/extra/*/*.o
	install -d $(DESTDIR)$(includedir)
	install -m644 m_pd.h $(DESTDIR)$(includedir)/m_pd.h
	install -d $(DESTDIR)$(mandir)/man1
	gzip < ../man/pd.1 >  $(DESTDIR)$(mandir)/man1/pd.1.gz
	chmod 644 $(DESTDIR)$(mandir)/man1/pd.1.gz
	gzip < ../man/pdsend.1 >  $(DESTDIR)$(mandir)/man1/pdsend.1.gz
	chmod 644 $(DESTDIR)$(mandir)/man1/pdsend.1.gz
	gzip < ../man/pdreceive.1 >  $(DESTDIR)$(mandir)/man1/pdreceive.1.gz
	chmod 644 $(DESTDIR)$(mandir)/man1/pdreceive.1.gz
	@echo "Pd install succeeded."

local-clean:
	-rm -f ../obj/* $(BIN_DIR)/pd $(BIN_DIR)/pdsend \
	    $(BIN_DIR)/pdreceive $(BIN_DIR)/pd-watchdog m_stamp.c \
            $(BIN_DIR)/*.tcl
	-rm -f `find ../portaudio -name "*.o"` 
	-rm -f *~
	-(cd ../doc/6.externs; rm -f *.pd_linux)
	-rm -f makefile.dependencies
	touch makefile.dependencies
	chmod 666 makefile.dependencies

extra-clean:
	-rm -f `find ../extra/ -name "*.pd_*"`
	-rm -f tags

clean: extra-clean local-clean

distclean: clean
	-rm -f config.cache config.log config.status makefile tags \
		autom4te.cache/output.* autom4te.cache/traces.* autom4te.cache/requests
	-rmdir autom4te.cache
	-rm -rf autom4te-*.cache

tags: $(SRC) $(GSRC); ctags *.[ch]

depend: makefile.dependencies

makefile.dependencies:
	$(CC) $(CPPFLAGS) -M $(SRC) > makefile.dependencies

uninstall:
	rm -f -r $(DESTDIR)$(libpddir)
	rm -f $(DESTDIR)$(bindir)/pd
	rm -f $(DESTDIR)$(bindir)/pdsend
	rm -f $(DESTDIR)$(bindir)/pdreceive
	rm -f $(DESTDIR)$(includedir)/m_pd.h
	rm -f $(DESTDIR)$(mandir)/man1/pd.1.gz
	rm -f $(DESTDIR)$(mandir)/man1/pdsend.1.gz
	rm -f $(DESTDIR)$(mandir)/man1/pdreceive.1.gz

include makefile.dependencies
